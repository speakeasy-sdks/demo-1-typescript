/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * An Automation Rule defining how and when artefacts in an environment should be updated.
 *
 * @remarks
 * <SchemaDefinition schemaRef="#/components/schemas/AutomationRuleRequest" />
 *
 */
export class AutomationRule {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Automation Rule from an Environment.
   */
  async deleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(
    req: operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse =
      new operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case [204, 404].includes(httpRes?.status):
        break;
    }

    return res;
  }

  /**
   * List all Automation Rules in an Environment.
   */
  async getOrgsOrgIdAppsAppIdEnvsEnvIdRules(
    req: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse =
      new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.automationRuleResponses = [];
          const resFieldDepth: number = utils.getResFieldDepth(res);
          res.automationRuleResponses = utils.objectToClass(
            httpRes?.data,
            shared.AutomationRuleResponse,
            resFieldDepth
          );
        }
        break;
      case httpRes?.status == 500:
        break;
    }

    return res;
  }

  /**
   * Get a specific Automation Rule for an Environment.
   */
  async getOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(
    req: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse =
      new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.automationRuleResponse = utils.objectToClass(
            httpRes?.data,
            shared.AutomationRuleResponse
          );
        }
        break;
      case httpRes?.status == 404:
        break;
    }

    return res;
  }

  /**
   * Create a new Automation Rule for an Environment.
   *
   * @remarks
   * Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.
   */
  async postOrgsOrgIdAppsAppIdEnvsEnvIdRules(
    req: operations.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "automationRuleRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse =
      new operations.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.automationRuleResponse = utils.objectToClass(
            httpRes?.data,
            shared.AutomationRuleResponse
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.errorInfoResponse = utils.objectToClass(
            httpRes?.data,
            shared.ErrorInfoResponse
          );
        }
        break;
      case httpRes?.status == 422:
        break;
    }

    return res;
  }

  /**
   * Update an existing Automation Rule for an Environment.
   *
   * @remarks
   * Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.
   */
  async putOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(
    req: operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "automationRuleRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse =
      new operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.automationRuleResponse = utils.objectToClass(
            httpRes?.data,
            shared.AutomationRuleResponse
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.errorInfoResponse = utils.objectToClass(
            httpRes?.data,
            shared.ErrorInfoResponse
          );
        }
        break;
      case [404, 422].includes(httpRes?.status):
        break;
    }

    return res;
  }
}
