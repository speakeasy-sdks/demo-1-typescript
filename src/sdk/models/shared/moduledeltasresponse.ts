/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ControllerResponse } from "./controllerresponse";
import { UpdateActionResponse } from "./updateactionresponse";
import { Expose, Transform } from "class-transformer";

/**
 * ModuleDeltas groups the different operations together.
 */
export class ModuleDeltasResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ControllerResponse, elemDepth: 2 })
  @Expose({ name: "add" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Record<string, ControllerResponse>> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ControllerResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  add: Record<string, Record<string, ControllerResponse>>;

  @SpeakeasyMetadata()
  @Expose({ name: "remove" })
  remove: string[];

  @SpeakeasyMetadata({ elemType: UpdateActionResponse, elemDepth: 2 })
  @Expose({ name: "update" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, UpdateActionResponse[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], UpdateActionResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  update: Record<string, UpdateActionResponse[]>;
}
