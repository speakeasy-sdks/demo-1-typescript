/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.
 *
 * @remarks
 * <SchemaDefinition schemaRef="#/components/schemas/EnvironmentRequest" />
 *
 */
export class Environment {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a specific Environment.
   *
   * @remarks
   * Deletes a specific Environment in an Application.
   *
   * Deleting an Environment will also delete the Deployment history of the Environment.
   *
   * _Deletions are currently irreversible._
   */
  async deleteOrgsOrgIdAppsAppIdEnvsEnvId(
    req: operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse =
      new operations.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 204:
        break;
      case [400, 404].includes(httpRes?.status):
        if (utils.matchContentType(contentType, `application/json`)) {
          res.humanitecErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.HumanitecErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * List all Environments.
   *
   * @remarks
   * Lists all of the Environments in the Application.
   */
  async getOrgsOrgIdAppsAppIdEnvs(
    req: operations.GetOrgsOrgIdAppsAppIdEnvsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgsOrgIdAppsAppIdEnvsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgsOrgIdAppsAppIdEnvsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetOrgsOrgIdAppsAppIdEnvsResponse =
      new operations.GetOrgsOrgIdAppsAppIdEnvsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.environmentResponses = [];
          const resFieldDepth: number = utils.getResFieldDepth(res);
          res.environmentResponses = utils.objectToClass(
            httpRes?.data,
            shared.EnvironmentResponse,
            resFieldDepth
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get a specific Environment.
   *
   * @remarks
   * Gets a specific Environment in an Application.
   */
  async getOrgsOrgIdAppsAppIdEnvsEnvId(
    req: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...config?.headers };
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse =
      new operations.GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.environmentResponse = utils.objectToClass(
            httpRes?.data,
            shared.EnvironmentResponse
          );
        }
        break;
      case httpRes?.status == 404:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.humanitecErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.HumanitecErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Add a new Environment to an Application.
   *
   * @remarks
   * Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.
   *
   * The Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)
   *
   * The Type of the Environment must be already defined in the Organization.
   */
  async postOrgsOrgIdAppsAppIdEnvs(
    req: operations.PostOrgsOrgIdAppsAppIdEnvsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrgsOrgIdAppsAppIdEnvsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrgsOrgIdAppsAppIdEnvsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "environmentDefinitionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PostOrgsOrgIdAppsAppIdEnvsResponse =
      new operations.PostOrgsOrgIdAppsAppIdEnvsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.environmentResponse = utils.objectToClass(
            httpRes?.data,
            shared.EnvironmentResponse
          );
        }
        break;
      case [400, 404, 409].includes(httpRes?.status):
        if (utils.matchContentType(contentType, `application/json`)) {
          res.humanitecErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.HumanitecErrorResponse
          );
        }
        break;
    }

    return res;
  }

  /**
   * Rebase to a different Deployment.
   *
   * @remarks
   * Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.
   *
   * _Running code will only be affected on the next Deployment to the Environment._
   *
   * Common use cases for rebasing an Environment:
   *
   * * _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.
   *
   * * _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.
   */
  async putOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(
    req: operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{orgId}/apps/{appId}/envs/{envId}/from_deploy_id",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");
    headers[
      "user-agent"
    ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse =
      new operations.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 204:
        break;
      case [400, 404].includes(httpRes?.status):
        if (utils.matchContentType(contentType, `application/json`)) {
          res.humanitecErrorResponse = utils.objectToClass(
            httpRes?.data,
            shared.HumanitecErrorResponse
          );
        }
        break;
    }

    return res;
  }
}
